// Alex Meyer
// 3/13/2014
// Used to receive data from the Hokuyo URG-04LX-UG01 Laser Range Finder

#include <string>
#include <sstream>
#include "ros/ros.h"
#include "std_msgs/String.h"
#include "sensor_msgs/LaserScan.h"

const std::string LASEROUTPUT = "/scan";

// Function that is called whenever a new message arrives
void laserReading(const sensor_msgs::LaserScan readings)
{
  std::string output = "";
  ROS_INFO("size[%d]: ", readings.ranges.size());
  for(unsigned int i = 0; i < readings.ranges.size(); ++i)
  {
    std::stringstream ss;
    ss<<readings.ranges[i];
    output += ss.str();
    //ROS_INFO("I heard: [%f]", readings.ranges[i]);
  }
  ROS_INFO("data: [%s]", output.c_str());
}

int main(int argc, char **argv)
{
  // Initialize the ROS System

  /**
   * The ros::init() function needs to see argc and argv so that it can perform
   * any ROS arguments and name remapping that were provided at the command line. For programmatic
   * remappings you can use a different version of init() which takes remappings
   * directly, but for most command-line programs, passing argc and argv is the easiest
   * way to do it.  The third argument to init() is the name of the node.
   *
   * You must call one of the versions of ros::init() before using any other
   * part of the ROS system.
   */
  ros::init(argc, argv, "listener");

  /**
   * NodeHandle is the main access point to communications with the ROS system.
   * The first NodeHandle constructed will fully initialize this node, and the last
   * NodeHandle destructed will close down the node.
   */
  ros::NodeHandle n;

  /**
   * The subscribe() call is how you tell ROS that you want to receive messages
   * on a given topic.  This invokes a call to the ROS
   * master node, which keeps a registry of who is publishing and who
   * is subscribing.  Messages are passed to a callback function, here
   * called chatterCallback.  subscribe() returns a Subscriber object that you
   * must hold on to until you want to unsubscribe.  When all copies of the Subscriber
   * object go out of scope, this callback will automatically be unsubscribed from
   * this topic.
   *
   * The second parameter to the subscribe() function is the size of the message
   * queue.  If messages are arriving faster than they are being processed, this
   * is the number of messages that will be buffered up before beginning to throw
   * away the oldest ones.
   *
   * Subscribe to the laser output topic, will call laserReading when message arrives
   */
  ros::Subscriber sub = n.subscribe(LASEROUTPUT, 1, laserReading);

  /**
   * ros::spin() will enter a loop, pumping callbacks. ros::spin()
   * will exit when Ctrl-C is pressed, or the node is shutdown by the master.
   * This will spin, waiting for messages to arrive
   */
  ros::spin();

  return 0;
}
